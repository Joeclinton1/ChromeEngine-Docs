"use strict";(self.webpackChunkchrome_engine_docs=self.webpackChunkchrome_engine_docs||[]).push([[144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1970:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},a="Interactions",c={unversionedId:"user_docs/Interactions",id:"user_docs/Interactions",isDocsHomePage:!1,title:"Interactions",description:"ChromeEngine provides a number of custom blocks to help with sensing interactions and retrieving GameObject data. They should be placed within the Logic sprite. These are the blocks available:",source:"@site/docs/user_docs/05-Interactions.md",sourceDirName:"user_docs",slug:"/user_docs/Interactions",permalink:"/docs/user_docs/Interactions",editUrl:"https://github.com/your-github-username/your-repo-name/edit/main/docs/docs/user_docs/05-Interactions.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"userSidebar",previous:{title:"Updating Scene",permalink:"/docs/user_docs/Updating Objects"},next:{title:"Controllers",permalink:"/docs/user_docs/Controllers"}},s=[{value:"<code>check_and_add_interaction</code>",id:"check_and_add_interaction",children:[]},{value:"<code>playerIsTouching?</code>",id:"playeristouching",children:[]},{value:"<code>getPosition</code>",id:"getposition",children:[]}],l=(d="ScratchBlocks",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var d;const p={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interactions"},"Interactions"),(0,i.kt)("p",null,"ChromeEngine provides a number of custom blocks to help with sensing interactions and retrieving GameObject data. They should be placed within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Logic sprite"),". These are the blocks available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"check_and_add_interaction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"playerIsTouching?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getPosition"))),(0,i.kt)("h3",{id:"check_and_add_interaction"},(0,i.kt)("inlineCode",{parentName:"h3"},"check_and_add_interaction")),(0,i.kt)(l,{mdxType:"ScratchBlocks"},"\n_interacted = interactions.check_and_add_interaction \\( object 1 name [] object 2 name [] interaction distance  [] label  [] add to interactions list? <>\\) :: custom\n"),(0,i.kt)("p",null,"Sets ",(0,i.kt)("inlineCode",{parentName:"p"},"_interacted")," to True, if object 1 and object 2's bounding spheres are closer than the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"interaction distance"),". Additionally adds ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"interactions")," list if ",(0,i.kt)("inlineCode",{parentName:"p"},"add to interactions list?")," is set to True. "),(0,i.kt)("h3",{id:"playeristouching"},(0,i.kt)("inlineCode",{parentName:"h3"},"playerIsTouching?")),(0,i.kt)(l,{mdxType:"ScratchBlocks"},"\n_touching? = Interactions.playerIsTouching? \\( object name  [] label  [] \\) :: custom\n"),(0,i.kt)("p",null,"Sets ",(0,i.kt)("inlineCode",{parentName:"p"},"_touching?")," to True if the ",(0,i.kt)("inlineCode",{parentName:"p"},"player")," object is touching ",(0,i.kt)("inlineCode",{parentName:"p"},"object name"),". Additionally adds the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," to the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"interactions")," list"),(0,i.kt)("h3",{id:"getposition"},(0,i.kt)("inlineCode",{parentName:"h3"},"getPosition")),(0,i.kt)(l,{mdxType:"ScratchBlocks"},"\n_x, _y, _z = GameObjects.getPosition \\( object name  [] label  [] \\) :: custom\n"))}m.isMDXComponent=!0}}]);