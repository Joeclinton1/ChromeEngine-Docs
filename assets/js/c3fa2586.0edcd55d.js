"use strict";(self.webpackChunkchrome_engine_docs=self.webpackChunkchrome_engine_docs||[]).push([[116],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),u=n,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return r?o.createElement(h,l(l({ref:t},p),{},{components:r})):o.createElement(h,l({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6374:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={},l="Controllers",i={unversionedId:"user_docs/Controllers",id:"user_docs/Controllers",isDocsHomePage:!1,title:"Controllers",description:"These are blocks which control player and/or camera movement. They should be placed within the Logic sprite. The following blocks are provided:",source:"@site/docs/user_docs/06-Controllers.md",sourceDirName:"user_docs",slug:"/user_docs/Controllers",permalink:"/ChromeEngine-Docs/docs/user_docs/Controllers",editUrl:"https://github.com/your-github-username/your-repo-name/edit/main/docs/docs/user_docs/06-Controllers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"userSidebar",previous:{title:"Interactions",permalink:"/ChromeEngine-Docs/docs/user_docs/Interactions"},next:{title:"GUI",permalink:"/ChromeEngine-Docs/docs/user_docs/GUI"}},s=[{value:"<code>PlayerController</code>",id:"playercontroller",children:[]},{value:"<code>targetGameObjWithOffset</code>",id:"targetgameobjwithoffset",children:[]},{value:"<code>arrowKeysRotateCam</code>",id:"arrowkeysrotatecam",children:[]},{value:"<code>freeLook</code>",id:"freelook",children:[]}],c=(p="ScratchBlocks",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var p;const d={toc:s},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"controllers"},"Controllers"),(0,n.kt)("p",null,"These are blocks which control player and/or camera movement. They should be placed within the ",(0,n.kt)("inlineCode",{parentName:"p"},"Logic sprite"),". The following blocks are provided:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"PlayerController")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"targetGameObjWithOffset")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"arrowKeysRotateCam")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"freeLook"))),(0,n.kt)("h3",{id:"playercontroller"},(0,n.kt)("inlineCode",{parentName:"h3"},"PlayerController")),(0,n.kt)(c,{mdxType:"ScratchBlocks"},"\ncontrollers.playerController \\( walk speed  [], run speed  [], jump height [], glide/walk mode = <>\\) :: custom\n"),(0,n.kt)("p",null,"Makes it so the arrow keys and WASD can be used to move the player in 3D space. Additionally targets the player with the camera."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Walk speed"),": the speed the player moves normally"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Run speed"),": the speed the player moves when shift key is pressed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Jump height"),": height of game units the player will move up on the y axis when the spacebar is pressed"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"glide/walk mode"),": If set to true the player will move around as if they have legs otherwise the player will move like a rolling ball.")),(0,n.kt)("h3",{id:"targetgameobjwithoffset"},(0,n.kt)("inlineCode",{parentName:"h3"},"targetGameObjWithOffset")),(0,n.kt)(c,{mdxType:"ScratchBlocks"},"\nControllers.targetGameObjWithOffset \\( object name [] offset  []  []  [] \\):: custom\n"),(0,n.kt)("p",null,"Targets a game object and follows it around with an ",(0,n.kt)("inlineCode",{parentName:"p"},"offset")," vector, creating a third-person perspective."),(0,n.kt)("h3",{id:"arrowkeysrotatecam"},(0,n.kt)("inlineCode",{parentName:"h3"},"arrowKeysRotateCam")),(0,n.kt)(c,{mdxType:"ScratchBlocks"},"\nControllers.arrowkeysRotateCam \\(\\) :: custom\n"),(0,n.kt)("p",null,"Rotates the camera's yaw and pitch, when arrow keys are pressed. Rotation is intrinsic meaning it will always be relative to whatever direction the camera is currently looking."),(0,n.kt)("h3",{id:"freelook"},(0,n.kt)("inlineCode",{parentName:"h3"},"freeLook")),(0,n.kt)(c,{mdxType:"ScratchBlocks"},"\nControllers.freeLook \\(\\)  :: custom\n"),(0,n.kt)("p",null,"Allows rotation and movement of the camera freely, with out any connection to the player object. Useful in edit mode."))}u.isMDXComponent=!0}}]);