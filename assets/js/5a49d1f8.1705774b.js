"use strict";(self.webpackChunkchrome_engine_docs=self.webpackChunkchrome_engine_docs||[]).push([[828],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>y});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=c(o),m=r,y=h["".concat(l,".").concat(m)]||h[m]||d[m]||i;return o?n.createElement(y,s(s({ref:t},p),{},{components:o})):n.createElement(y,s({ref:t},p))}));function y(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,s=new Array(i);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[h]="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=o[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9029:(e,t,o)=>{o.r(t),o.d(t,{contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=o(7462),r=(o(7294),o(3905));const i={},s="Collision Tests",a={unversionedId:"system_docs/Physics/Collision Tests",id:"system_docs/Physics/Collision Tests",isDocsHomePage:!1,title:"Collision Tests",description:"ChromeEngine's collision tests are based on the code found at https://realtimecollisiondetection.net/. So if you want more information just go there.",source:"@site/docs/system_docs/02-Physics/02-Collision Tests.md",sourceDirName:"system_docs/02-Physics",slug:"/system_docs/Physics/Collision Tests",permalink:"/docs/system_docs/Physics/Collision Tests",editUrl:"https://github.com/your-github-username/your-repo-name/edit/main/docs/docs/system_docs/02-Physics/02-Collision Tests.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"systemSidebar",previous:{title:"Rigid Body Physics",permalink:"/docs/system_docs/Physics/Rigid Body Physics"}},l=[{value:"Pseudo code",id:"pseudo-code",children:[]}],c={toc:l},p="wrapper";function h(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collision-tests"},"Collision Tests"),(0,r.kt)("p",null,"ChromeEngine's collision tests are based on the code found at ",(0,r.kt)("a",{parentName:"p",href:"https://realtimecollisiondetection.net/"},"https://realtimecollisiondetection.net/"),". So if you want more information just go there."),(0,r.kt)("h2",{id:"pseudo-code"},"Pseudo code"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"For each primitive ",(0,r.kt)("inlineCode",{parentName:"li"},"_*prim")," that is a) not the player b) is a polygon c) has a material with collisions turned on",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If the distance the player travelled in one frame is greater than it's radius, then we apply anti_tunneling",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Cast a ray between the players old and new position and find the closest point on that ray to ",(0,r.kt)("inlineCode",{parentName:"li"},"_*prim")),(0,r.kt)("li",{parentName:"ol"},"Use the closest point location for the players bounding sphere centre instead of it's actual centre."))),(0,r.kt)("li",{parentName:"ol"},"Perform a sphere to sphere-bounded polygon collision test",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Check if the sphere of the player and bounding-sphere of the polygon are closer than the sum of their radii. If no return."),(0,r.kt)("li",{parentName:"ol"},"Perform a sphere-polygon collision test (exactly the same as 5.2.8 Testing Sphere against Polygon of RTCD)",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Check if the sphere intersects the polygon's plane. If no return."),(0,r.kt)("li",{parentName:"ol"},"Test if the sphere intersects any of the polygons edges. ",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If yes return the edge intersection point and the closest point on the sphere to the edge"))),(0,r.kt)("li",{parentName:"ol"},"Find an axis plane which is not orthogonal to the polygon's plane. "),(0,r.kt)("li",{parentName:"ol"},"Project the polygon onto it by removing either the x,y or z component for each polygon vertex depending on which plane was chosen. Also project the sphere centre onto the same plane with the same method."),(0,r.kt)("li",{parentName:"ol"},"If the projected Polygon is a tri perform a PointInTri test Else perform a PointInPolygon test.")))))))))}h.isMDXComponent=!0}}]);